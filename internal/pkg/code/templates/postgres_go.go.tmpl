// GENERATED CODE! Don't modify.

package {{.Package}}

import (
  "context"
  "fmt"
	{{ .AdditionalImports }}

  "github.com/jackc/pgx/v5"
  "github.com/jackc/pgx/v5/pgxpool"
)

// DatabaseFunctions contains your database functions.
type DatabaseFunctions struct {
  db *pgxpool.Pool
}

// NewDatabaseFunctions returns a pointer to a new instance of DatabaseFunctions.
func NewDatabaseFunctions(db *pgxpool.Pool) *DatabaseFunctions {
  return &DatabaseFunctions{
    db: db,
  }
}

{{ range .Functions }}
func (df *DatabaseFunctions) {{.ToPascalCase}} (ctx context.Context {{- if .HasArgs -}}, {{.Args "go"}} {{- end}}) ({{- if .ReturnsValue}}{{if .ReturnsSet}}[]{{end}}{{.LanguageReturnType "go"}}, {{end -}} error) {
  const stmt = `{{ .SafeFunctionBody -}}`

  {{if .ReturnsValue -}}
    {{if .ReturnsRecord -}}
    rows, err := df.db.Query(ctx, stmt {{- if .HasArgs -}}, {{.QueryArgs "go"}} {{- end}})
    if err != nil {
      return {{.DefaultReturnValue "go"}}, fmt.Errorf("calling {{.Name}}: %w", err)
    }

    results, err := scan(rows)
    if err != nil {
      return {{.DefaultReturnValue "go"}}, fmt.Errorf("calling {{.Name}}: %w", err)
    }


    {{- else -}}
    rows, err := df.db.Query(ctx, stmt {{- if .HasArgs -}}, {{.QueryArgs "go"}} {{- end}})
    if err != nil {
      return {{.DefaultReturnValue "go"}}, fmt.Errorf("calling {{.Name}}: %w", err)
    }

    var results []{{.LanguageReturnType "go"}}
    for rows.Next() {
      var result {{.LanguageReturnType "go"}}
      if err := rows.Scan(&result); err != nil {
        return {{.DefaultReturnValue "go"}}, fmt.Errorf("calling {{.Name}}: %w", err)
      }
      results = append(results, result)
    }
    
    {{end -}}

    {{if .ReturnsSet}}
    return results, nil
    {{else}}
    if results == nil {
      return {{.DefaultReturnValue "go"}}, nil
    }
    return results[0], nil
    {{end -}}

  {{- else -}}
    _, err := df.db.Exec(ctx, stmt {{- if .HasArgs -}}, {{.QueryArgs "go"}} {{- end}})
    if err != nil {
      return fmt.Errorf("calling {{.Name}}: %w", err)
    }

    return nil
  {{end -}}
}
{{end}}

func scan(rows pgx.Rows) ([]map[string]any, error) {
	fields := rows.FieldDescriptions()

	var values []map[string]any
	for rows.Next() {
		scans := make([]any, len(fields))
		row := make(map[string]any)

		for i := range scans {
			scans[i] = &scans[i]
		}

		if err := rows.Scan(scans...); err != nil {
			return nil, fmt.Errorf("scaning values: %w", err)
		}

		for i, v := range scans {
			if v != nil {
				if fields[i].DataTypeOID == 2950 {
					b := v.([16]byte)
					v = fmt.Sprintf("%x-%x-%x-%x-%x", b[0:4], b[4:6], b[6:8], b[8:10], b[10:16])
				}
				row[fields[i].Name] = v
			}
		}
		values = append(values, row)
	}

	return values, nil
}